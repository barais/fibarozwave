/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_zwave4j_Manager */

#ifndef _Included_org_zwave4j_Manager
#define _Included_org_zwave4j_Manager
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_zwave4j_Manager
 * Method:    createNativeManager
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_createNativeManager
  (JNIEnv *, jclass);

/*
 * Class:     org_zwave4j_Manager
 * Method:    destroyNativeManager
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_destroyNativeManager
  (JNIEnv *, jclass);

/*
 * Class:     org_zwave4j_Manager
 * Method:    writeConfig
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_writeConfig
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addDriver
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addDriver
  (JNIEnv *, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeDriver
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_removeDriver
  (JNIEnv *, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getControllerNodeId
 * Signature: (J)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getControllerNodeId
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getSUCNodeId
 * Signature: (J)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getSUCNodeId
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isPrimaryController
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isPrimaryController
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isStaticUpdateController
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isStaticUpdateController
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isBridgeController
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isBridgeController
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getLibraryVersion
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getLibraryVersion
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getLibraryTypeName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getLibraryTypeName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getSendQueueCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_zwave4j_Manager_getSendQueueCount
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    logDriverStatistics
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_logDriverStatistics
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getControllerInterfaceType
 * Signature: (J)Lorg/zwave4j/ControllerInterface;
 */
JNIEXPORT jobject JNICALL Java_org_zwave4j_Manager_getControllerInterfaceType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getControllerPath
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getControllerPath
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getPollInterval
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_zwave4j_Manager_getPollInterval
  (JNIEnv *, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setPollInterval
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setPollInterval
  (JNIEnv *, jobject, jint, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    enablePoll
 * Signature: (Lorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_enablePoll__Lorg_zwave4j_ValueId_2S
  (JNIEnv *, jobject, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    enablePoll
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_enablePoll__Lorg_zwave4j_ValueId_2
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    disablePoll
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_disablePoll
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isPolled
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isPolled
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setPollIntensity
 * Signature: (Lorg/zwave4j/ValueId;S)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setPollIntensity
  (JNIEnv *, jobject, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    refreshNodeInfo
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_refreshNodeInfo
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    requestNodeState
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_requestNodeState
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    requestNodeDynamic
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_requestNodeDynamic
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeListeningDevice
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeListeningDevice
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeFrequentListeningDevice
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeFrequentListeningDevice
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeBeamingDevice
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeBeamingDevice
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeRoutingDevice
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeRoutingDevice
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeSecurityDevice
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeSecurityDevice
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeMaxBaudRate
 * Signature: (JS)J
 */
JNIEXPORT jlong JNICALL Java_org_zwave4j_Manager_getNodeMaxBaudRate
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeVersion
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNodeVersion
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeSecurity
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNodeSecurity
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeBasic
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNodeBasic
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeGeneric
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNodeGeneric
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeSpecific
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNodeSpecific
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeType
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeType
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeNeighbors
 * Signature: (JSLjava/util/concurrent/atomic/AtomicReference;)J
 */
JNIEXPORT jlong JNICALL Java_org_zwave4j_Manager_getNodeNeighbors
  (JNIEnv *, jobject, jlong, jshort, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeManufacturerName
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeManufacturerName
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeProductName
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeProductName
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeName
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeName
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeLocation
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeLocation
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeManufacturerId
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeManufacturerId
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeProductType
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeProductType
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeProductId
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeProductId
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeManufacturerName
 * Signature: (JSLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeManufacturerName
  (JNIEnv *, jobject, jlong, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeProductName
 * Signature: (JSLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeProductName
  (JNIEnv *, jobject, jlong, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeName
 * Signature: (JSLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeName
  (JNIEnv *, jobject, jlong, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeLocation
 * Signature: (JSLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeLocation
  (JNIEnv *, jobject, jlong, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeOn
 * Signature: (JS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeOn
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeOff
 * Signature: (JS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeOff
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setNodeLevel
 * Signature: (JSS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setNodeLevel
  (JNIEnv *, jobject, jlong, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeInfoReceived
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeInfoReceived
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeClassInformation
 * Signature: (JSSLjava/lang/String;Ljava/lang/Short;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getNodeClassInformation__JSSLjava_lang_String_2Ljava_lang_Short_2
  (JNIEnv *, jobject, jlong, jshort, jshort, jstring, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeClassInformation
 * Signature: (JSSLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getNodeClassInformation__JSSLjava_lang_String_2
  (JNIEnv *, jobject, jlong, jshort, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeClassInformation
 * Signature: (JSS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getNodeClassInformation__JSS
  (JNIEnv *, jobject, jlong, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeAwake
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeAwake
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isNodeFailed
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isNodeFailed
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeQueryStage
 * Signature: (JS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getNodeQueryStage
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueLabel
 * Signature: (Lorg/zwave4j/ValueId;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getValueLabel
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueLabel
 * Signature: (Lorg/zwave4j/ValueId;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setValueLabel
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueUnits
 * Signature: (Lorg/zwave4j/ValueId;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getValueUnits
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueUnits
 * Signature: (Lorg/zwave4j/ValueId;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setValueUnits
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueHelp
 * Signature: (Lorg/zwave4j/ValueId;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getValueHelp
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueHelp
 * Signature: (Lorg/zwave4j/ValueId;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setValueHelp
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueMin
 * Signature: (Lorg/zwave4j/ValueId;)I
 */
JNIEXPORT jint JNICALL Java_org_zwave4j_Manager_getValueMin
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueMax
 * Signature: (Lorg/zwave4j/ValueId;)I
 */
JNIEXPORT jint JNICALL Java_org_zwave4j_Manager_getValueMax
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isValueReadOnly
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isValueReadOnly
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isValueWriteOnly
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isValueWriteOnly
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isValueSet
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isValueSet
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    isValuePolled
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_isValuePolled
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsBool
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsBool
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsByte
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsByte
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsFloat
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsFloat
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsInt
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsInt
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsShort
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsShort
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsString
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsString
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueAsRaw
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueAsRaw
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueListSelectionString
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueListSelectionString
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueListSelectionInt
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueListSelectionInt
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueListItems
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/List;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueListItems
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getValueFloatPrecision
 * Signature: (Lorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getValueFloatPrecision
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsBool
 * Signature: (Lorg/zwave4j/ValueId;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsBool
  (JNIEnv *, jobject, jobject, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsByte
 * Signature: (Lorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsByte
  (JNIEnv *, jobject, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsFloat
 * Signature: (Lorg/zwave4j/ValueId;F)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsFloat
  (JNIEnv *, jobject, jobject, jfloat);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsInt
 * Signature: (Lorg/zwave4j/ValueId;I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsInt
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsShort
 * Signature: (Lorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsShort
  (JNIEnv *, jobject, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsRaw
 * Signature: (Lorg/zwave4j/ValueId;[S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsRaw
  (JNIEnv *, jobject, jobject, jshortArray);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueAsString
 * Signature: (Lorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueAsString
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setValueListSelection
 * Signature: (Lorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setValueListSelection
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    refreshValue
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_refreshValue
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setChangeVerified
 * Signature: (Lorg/zwave4j/ValueId;Z)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setChangeVerified
  (JNIEnv *, jobject, jobject, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    pressButton
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_pressButton
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    releaseButton
 * Signature: (Lorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_releaseButton
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNumSwitchPoints
 * Signature: (Lorg/zwave4j/ValueId;)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNumSwitchPoints
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSwitchPoint
 * Signature: (Lorg/zwave4j/ValueId;SSB)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSwitchPoint
  (JNIEnv *, jobject, jobject, jshort, jshort, jbyte);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeSwitchPoint
 * Signature: (Lorg/zwave4j/ValueId;SS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_removeSwitchPoint
  (JNIEnv *, jobject, jobject, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    clearSwitchPoints
 * Signature: (Lorg/zwave4j/ValueId;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_clearSwitchPoints
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getSwitchPoint
 * Signature: (Lorg/zwave4j/ValueId;SLjava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_getSwitchPoint
  (JNIEnv *, jobject, jobject, jshort, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    switchAllOn
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_switchAllOn
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    switchAllOff
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_switchAllOff
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setConfigParam
 * Signature: (JSSIS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setConfigParam__JSSIS
  (JNIEnv *, jobject, jlong, jshort, jshort, jint, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setConfigParam
 * Signature: (JSSI)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setConfigParam__JSSI
  (JNIEnv *, jobject, jlong, jshort, jshort, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    requestConfigParam
 * Signature: (JSS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_requestConfigParam
  (JNIEnv *, jobject, jlong, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    requestAllConfigParams
 * Signature: (JS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_requestAllConfigParams
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNumGroups
 * Signature: (JS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNumGroups
  (JNIEnv *, jobject, jlong, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getAssociations
 * Signature: (JSSLjava/util/concurrent/atomic/AtomicReference;)J
 */
JNIEXPORT jlong JNICALL Java_org_zwave4j_Manager_getAssociations
  (JNIEnv *, jobject, jlong, jshort, jshort, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getMaxAssociations
 * Signature: (JSS)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getMaxAssociations
  (JNIEnv *, jobject, jlong, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getGroupLabel
 * Signature: (JSS)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getGroupLabel
  (JNIEnv *, jobject, jlong, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addAssociation
 * Signature: (JSSS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_addAssociation
  (JNIEnv *, jobject, jlong, jshort, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeAssociation
 * Signature: (JSSS)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_removeAssociation
  (JNIEnv *, jobject, jlong, jshort, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addWatcher
 * Signature: (Lorg/zwave4j/NotificationWatcher;Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_addWatcher
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeWatcher
 * Signature: (Lorg/zwave4j/NotificationWatcher;Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_removeWatcher
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    resetController
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_resetController
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    softReset
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_softReset
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;Lorg/zwave4j/ControllerCallback;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2Lorg_zwave4j_ControllerCallback_2
  (JNIEnv *, jobject, jlong, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;Lorg/zwave4j/ControllerCallback;Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2Lorg_zwave4j_ControllerCallback_2Ljava_lang_Object_2
  (JNIEnv *, jobject, jlong, jobject, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;Lorg/zwave4j/ControllerCallback;Ljava/lang/Object;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2Lorg_zwave4j_ControllerCallback_2Ljava_lang_Object_2Z
  (JNIEnv *, jobject, jlong, jobject, jobject, jobject, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;Lorg/zwave4j/ControllerCallback;Ljava/lang/Object;ZS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2Lorg_zwave4j_ControllerCallback_2Ljava_lang_Object_2ZS
  (JNIEnv *, jobject, jlong, jobject, jobject, jobject, jboolean, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    beginControllerCommand
 * Signature: (JLorg/zwave4j/ControllerCommand;Lorg/zwave4j/ControllerCallback;Ljava/lang/Object;ZSS)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_beginControllerCommand__JLorg_zwave4j_ControllerCommand_2Lorg_zwave4j_ControllerCallback_2Ljava_lang_Object_2ZSS
  (JNIEnv *, jobject, jlong, jobject, jobject, jobject, jboolean, jshort, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    cancelControllerCommand
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_cancelControllerCommand
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    testNetworkNode
 * Signature: (JSJ)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_testNetworkNode
  (JNIEnv *, jobject, jlong, jshort, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    testNetwork
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_testNetwork
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    healNetworkNode
 * Signature: (JSZ)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_healNetworkNode
  (JNIEnv *, jobject, jlong, jshort, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    healNetwork
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_healNetwork
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNumScenes
 * Signature: ()S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getNumScenes
  (JNIEnv *, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getAllScenes
 * Signature: (Ljava/util/concurrent/atomic/AtomicReference;)S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_getAllScenes
  (JNIEnv *, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeAllScenes
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_removeAllScenes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_zwave4j_Manager
 * Method:    createScene
 * Signature: ()S
 */
JNIEXPORT jshort JNICALL Java_org_zwave4j_Manager_createScene
  (JNIEnv *, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeScene
 * Signature: (S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_removeScene
  (JNIEnv *, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsBool
 * Signature: (SLorg/zwave4j/ValueId;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsBool
  (JNIEnv *, jobject, jshort, jobject, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsByte
 * Signature: (SLorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsByte
  (JNIEnv *, jobject, jshort, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsFloat
 * Signature: (SLorg/zwave4j/ValueId;F)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsFloat
  (JNIEnv *, jobject, jshort, jobject, jfloat);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsInt
 * Signature: (SLorg/zwave4j/ValueId;I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsInt
  (JNIEnv *, jobject, jshort, jobject, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsShort
 * Signature: (SLorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsShort
  (JNIEnv *, jobject, jshort, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueAsString
 * Signature: (SLorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueAsString
  (JNIEnv *, jobject, jshort, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueListSelection
 * Signature: (SLorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueListSelection__SLorg_zwave4j_ValueId_2Ljava_lang_String_2
  (JNIEnv *, jobject, jshort, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    addSceneValueListSelection
 * Signature: (SLorg/zwave4j/ValueId;I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_addSceneValueListSelection__SLorg_zwave4j_ValueId_2I
  (JNIEnv *, jobject, jshort, jobject, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    removeSceneValue
 * Signature: (SLorg/zwave4j/ValueId;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_removeSceneValue
  (JNIEnv *, jobject, jshort, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValues
 * Signature: (SLjava/util/List;)I
 */
JNIEXPORT jint JNICALL Java_org_zwave4j_Manager_sceneGetValues
  (JNIEnv *, jobject, jshort, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsBool
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsBool
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsByte
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsByte
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsFloat
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsFloat
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsInt
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsInt
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsShort
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsShort
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueAsString
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueAsString
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueListSelectionString
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueListSelectionString
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneGetValueListSelectionInt
 * Signature: (SLorg/zwave4j/ValueId;Ljava/util/concurrent/atomic/AtomicReference;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneGetValueListSelectionInt
  (JNIEnv *, jobject, jshort, jobject, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsBool
 * Signature: (SLorg/zwave4j/ValueId;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsBool
  (JNIEnv *, jobject, jshort, jobject, jboolean);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsByte
 * Signature: (SLorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsByte
  (JNIEnv *, jobject, jshort, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsFloat
 * Signature: (SLorg/zwave4j/ValueId;F)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsFloat
  (JNIEnv *, jobject, jshort, jobject, jfloat);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsInt
 * Signature: (SLorg/zwave4j/ValueId;I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsInt
  (JNIEnv *, jobject, jshort, jobject, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsShort
 * Signature: (SLorg/zwave4j/ValueId;S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsShort
  (JNIEnv *, jobject, jshort, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueAsString
 * Signature: (SLorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueAsString
  (JNIEnv *, jobject, jshort, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueListSelection
 * Signature: (SLorg/zwave4j/ValueId;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueListSelection__SLorg_zwave4j_ValueId_2Ljava_lang_String_2
  (JNIEnv *, jobject, jshort, jobject, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneValueListSelection
 * Signature: (SLorg/zwave4j/ValueId;I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_setSceneValueListSelection__SLorg_zwave4j_ValueId_2I
  (JNIEnv *, jobject, jshort, jobject, jint);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getSceneLabel
 * Signature: (S)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_zwave4j_Manager_getSceneLabel
  (JNIEnv *, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    setSceneLabel
 * Signature: (SLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_setSceneLabel
  (JNIEnv *, jobject, jshort, jstring);

/*
 * Class:     org_zwave4j_Manager
 * Method:    sceneExists
 * Signature: (S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_sceneExists
  (JNIEnv *, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    activateScene
 * Signature: (S)Z
 */
JNIEXPORT jboolean JNICALL Java_org_zwave4j_Manager_activateScene
  (JNIEnv *, jobject, jshort);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getDriverStatistics
 * Signature: (JLorg/zwave4j/DriverData;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_getDriverStatistics
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     org_zwave4j_Manager
 * Method:    getNodeStatistics
 * Signature: (JSLorg/zwave4j/NodeData;)V
 */
JNIEXPORT void JNICALL Java_org_zwave4j_Manager_getNodeStatistics
  (JNIEnv *, jobject, jlong, jshort, jobject);

#ifdef __cplusplus
}
#endif
#endif
