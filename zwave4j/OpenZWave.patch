Index: cpp/src/Defs.h
===================================================================
--- cpp/src/Defs.h	(revision 686)
+++ cpp/src/Defs.h	(working copy)
@@ -28,6 +28,7 @@
 #ifndef _Defs_H
 #define _Defs_H
 #include <assert.h>
+#include <stdio.h>
 #include <list>
 
 #ifdef NULL
Index: cpp/src/platform/windows/LogImpl.cpp
===================================================================
--- cpp/src/platform/windows/LogImpl.cpp	(revision 686)
+++ cpp/src/platform/windows/LogImpl.cpp	(working copy)
@@ -30,6 +30,32 @@
 #include "Defs.h"
 #include "LogImpl.h"
 
+#ifdef MINGW
+
+#define vsprintf_s vsnprintf
+
+#define strcpy_s(DEST, NUM, SOURCE) strncpy(DEST, SOURCE, NUM)
+
+errno_t fopen_s(FILE** pFile, const char *filename, const char *mode)
+{
+    if (!pFile)
+    {
+        _set_errno(EINVAL);
+        return EINVAL;
+    }
+    
+    *pFile = fopen(filename, mode);
+    
+    if (!*pFile)
+    {
+        return errno;
+    }
+    
+    return 0;
+}
+
+#endif
+
 using namespace OpenZWave;
 
 //-----------------------------------------------------------------------------
Index: cpp/src/platform/windows/TimeStampImpl.cpp
===================================================================
--- cpp/src/platform/windows/TimeStampImpl.cpp	(revision 686)
+++ cpp/src/platform/windows/TimeStampImpl.cpp	(working copy)
@@ -25,6 +25,7 @@
 //	along with OpenZWave.  If not, see <http://www.gnu.org/licenses/>.
 //
 //-----------------------------------------------------------------------------
+#include <string>
 #include <Windows.h>
 #include "Defs.h"
 #include "TimeStampImpl.h"
@@ -61,7 +62,7 @@
 	int32 _milliseconds	// = 0
 )
 {
-	int64 offset = ((int64)_milliseconds) * 10000i64;	// Timestamp is stored in 100ns steps.
+	int64 offset = ((int64)_milliseconds) * 10000LL;	// Timestamp is stored in 100ns steps.
 	
 	GetSystemTimeAsFileTime( (FILETIME*)&m_stamp );
 	m_stamp += offset;
@@ -78,7 +79,7 @@
 	int64 now;
 	GetSystemTimeAsFileTime( (FILETIME*)&now );
 
-	return (int32)( ( m_stamp - now ) / 10000i64 );
+	return (int32)( ( m_stamp - now ) / 10000LL );
 }
 
 //-----------------------------------------------------------------------------
@@ -109,5 +110,5 @@
 	TimeStampImpl const& _other
 )
 {
-	return (int32)( ( m_stamp - _other.m_stamp ) / 10000i64 );
+	return (int32)( ( m_stamp - _other.m_stamp ) / 10000LL );
 }
